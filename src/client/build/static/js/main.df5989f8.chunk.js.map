{"version":3,"sources":["serviceWorker.js","Lib/CustomHooks/index.js","Modules/AppContainer/components/App/NotificationContainer/index.jsx","Lib/InputFields/Textbox/index.jsx","Modules/AppContainer/components/App/NavigationContainer/AccountModal/index.jsx","Modules/AppContainer/components/App/NavigationContainer/SiteActions/index.jsx","Constants/index.js","Modules/AppContainer/components/App/NavigationContainer/index.jsx","Modules/AppContainer/components/App/PageNotFound/index.jsx","Lib/Components/Tile/index.jsx","Lib/Components/InfoTile/index.jsx","Lib/Formatters/index.js","Lib/Table/SearchBar/index.jsx","Lib/Table/LoadingBar/index.jsx","Lib/Table/index.jsx","Lib/Components/Button/index.jsx","Lib/InputFields/Dropdown/index.jsx","Modules/Income/components/IncomeModal/index.jsx","Modules/Income/components/MonthlyIncomeTable/index.jsx","Modules/Expense/components/ExpenseModal/index.jsx","Modules/Expense/components/MonthlyExpenseTable/index.jsx","Modules/Home/services/selectors.js","Modules/Home/components/ProjectionChart/index.jsx","Modules/Home/components/Dashboard/index.jsx","Modules/AppContainer/components/App/index.jsx","Modules/AppContainer/services/NotificationModel.js","Lib/ApiCalls/index.js","Modules/AppContainer/services/UserModel.js","Seed_Data/index.js","Modules/Income/services/IncomeModel.js","Modules/Expense/services/ExpensesModel.js","store.js","index.jsx"],"names":["Boolean","window","location","hostname","match","useForm","initialValues","validate","submit","useState","formValues","setFormValues","errors","setErrors","isSubmitting","setIsSubmitting","handleReset","useEffect","Object","keys","length","handleChange","event","persist","valuesState","target","name","value","handleSubmit","preventDefault","NotificationContainer","position","alerts","initialArray","setValue","add","a","v","clear","removeById","id","arr","filter","removeIndex","index","slice","useArray","timeout","notification","useSelector","state","message","level","newAlert","Date","getTime","type","onDismiss","alert","indexOf","Textbox","label","placeholder","disabled","labelPosition","inputPosition","onChangeFunction","loading","inputState","errorMessage","className","onChange","hidden","spin","AccountModal","show","toggleFunc","account","user","Modal","size","onHide","Header","closeButton","Title","Body","Company","Job","Salary","SiteActions","dispatch","useDispatch","showAccountModal","setShowAccountModal","userAccount","dropdownTitle","User","FirstName","LastName","fetchUserAccount","href","role","data-toggle","aria-haspopup","aria-expanded","aria-labelledby","onClick","AppEnvConfigs","appName","siteCollectionPath","apiDomain","NavigationContainer","exact","to","AppConfigs","data-target","PageNotFound","Tile","children","InfoTile","header","displayValue","style","fontWeight","fontSize","currencyFormatter","val","numeral","format","SearchBar","props","input","marginBottom","ref","n","onSearch","height","LoadingBar","isLoading","Fragment","width","backgroundRepeat","Table","keyValue","columns","list","isSearchable","expandContent","csvFileName","cellEditOptions","headerClass","isPageable","pagination","options","currSizePerPage","onSizePerPageChange","map","option","key","text","page","bootstrap4","keyField","data","exportCSV","fileName","search","searchFormatted","float","marginRight","marginLeft","searchProps","baseProps","striped","hover","condensed","filterFactory","paginationFactory","noDataIndication","cellEdit","cellEditFactory","headerClasses","expandRow","Button","color","btnPaddingTop","btnPaddingBottom","icon","iconSpin","paddingTop","paddingBottom","Dropdown","displayField","valueField","isClearable","isMultiselect","multi","item","simpleValue","IncomeModal","incomeId","incomeTypes","income","defaultValues","monthlyIncomeList","find","Id","values","Name","IncomeTypeId","Amount","test","toString","createIncomeEntry","updateIncomeEntry","fetchIncomeTypes","onSubmit","Description","textAlign","MonthlyIncomeTable","showIncomeModal","setShowIncomeModal","setIncomeId","fetchMonthlyIncomes","tableOutline","dataField","sort","headerStyle","whiteSpace","headerAlign","align","formatter","cell","row","deleteIncomeEntry","ExpenseModal","expenseId","expenseTypes","expense","monthlyExpenseList","ExpenseTypeId","createExpenseEntry","updateExpenseEntry","fetchExpenseTypes","MonthlyExpenseTable","showExpenseModal","setShowExpenseModal","setExpenseId","fetchMonthlyExpenses","deleteExpenseEntry","getProjectionChartData","createSelector","reduce","b","zIndex","ReactHighcharts","require","HighchartsMore","Highcharts","HighchartsExporting","ProjectionChart","chartData","monthArray","currMonth","getMonth","chart","title","xAxis","categories","yAxis","reversedStacks","exporting","enabled","sourceHeight","sourceWidth","plotOptions","column","stacking","legend","verticalAlign","layout","series","colors","config","Home","totalMonthlyIncome","prev","curr","parseInt","totalMonthlyExpense","savingsGoalStatus","yearlySavings","topRight","App","document","path","render","reducers","addSuccessNotification","addWarningNotification","addErrorNotification","apiCalls","Get","action","fetch","url","method","credentials","accept","headers","pragma","response","status","json","Post","Accept","body","JSON","stringify","Put","Delete","Constants","populateAccount","effects","payload","populateIncomeList","incomes","populateIncomeTypes","addIncome","updateIncome","deleteIncome","x","IncomeType","this","error","populateExpenseList","expenses","populateExpenseTypes","addExpense","updateExpense","deleteExpense","ExpenseType","loadingPlugin","createLoadingPlugin","store","init","plugins","models","redux","devtoolOptions","middlewares","ReactDOM","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.df5989f8.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import {\r\n    useRef, useEffect, useState, useCallback\r\n} from 'react';\r\nimport { isEquivalent } from '../ObjectUtils';\r\n\r\n/**\r\n * This hooks records the previous value of an element before state change.\r\n * @param {Any} value - the value to be referenced.\r\n * @returns {Any}\r\n */\r\nexport const usePrevious = (value) => {\r\n    const ref = useRef();\r\n\r\n    useEffect(() => {\r\n        ref.current = value;\r\n    });\r\n\r\n    return ref.current;\r\n};\r\n\r\n/**\r\n * Hook used to change the document title of the webpage;\r\n * @param {String} title - The name of the webpage.\r\n * @example\r\n * useDocumentTitle('WebPage Name')\r\n */\r\nexport const useDocumentTitle = (title) => {\r\n    useEffect(() => {\r\n        document.title = title;\r\n    }, [title]);\r\n};\r\n\r\n/**\r\n * A hook used to manage an array.\r\n * @param {Array<Any>} initialArray - The initial array values.\r\n * @return {Object}\r\n */\r\nexport const useArray = (initialArray) => {\r\n    const [value, setValue] = useState(initialArray);\r\n    return {\r\n        value,\r\n        setValue,\r\n        add: (a) => setValue((v) => [...v, a]),\r\n        clear: () => setValue(() => []),\r\n        removeById: (id) => setValue((arr) => arr.filter((v) => v && v.id !== id)),\r\n        removeIndex: (index) => setValue((v) => [...v.slice(0, index), ...v.slice(index + 1)])\r\n    };\r\n};\r\n\r\n/**\r\n * A hook to manage form input.\r\n * @param {Object} initialValues - sets the forms initial values\r\n * @param {Function} validate - the validation func\r\n * @param {Function} submit - the submit func\r\n * @return {Object}\r\n */\r\nexport const useForm = (initialValues, validate, submit) => {\r\n    const [formValues, setFormValues] = useState({ ...initialValues });\r\n    const [errors, setErrors] = useState({});\r\n    const [isSubmitting, setIsSubmitting] = useState(false);\r\n\r\n    /**\r\n     * The handle submit function.\r\n     * @param {*} event - the event\r\n     */\r\n    const handleSubmit = (event) => {\r\n        if (event) event.preventDefault();\r\n        setErrors(validate(formValues));\r\n        setIsSubmitting(true);\r\n    };\r\n\r\n    /**\r\n     * The reset form function\r\n     */\r\n    const handleReset = () => {\r\n        setFormValues(initialValues);\r\n        setErrors({});\r\n        setIsSubmitting(false);\r\n    };\r\n\r\n    /**\r\n     * The on input change event handler.\r\n     * @param {*} event - the event that occurs\r\n     */\r\n    const handleChange = (event) => {\r\n        if (event.persist)\r\n            event.persist();\r\n\r\n        setFormValues((valuesState) => ({\r\n            ...valuesState,\r\n            [event.target.name]: event.target.value\r\n        }));\r\n    };\r\n\r\n    /**\r\n     * Sets the 'formValues' value if initialValues is defined\r\n     * as something other than an empty object.\r\n     */\r\n    // useEffect(() => {\r\n    //     if (!isEquivalent(formValues, initialValues))// && !isCreateForm)\r\n    //         setFormValues(initialValues);\r\n    // }, [initialValues]);\r\n\r\n    /**\r\n     * Calls the submit function if there are no errors\r\n     * and isSubmitting is set to true.\r\n     */\r\n    useEffect(() => {\r\n        if (Object.keys(errors).length === 0 && isSubmitting) {\r\n            submit(formValues);\r\n            handleReset();\r\n        }\r\n        setIsSubmitting(false);\r\n    }, [errors]);\r\n\r\n    return {\r\n        formValues,\r\n        errors,\r\n        handleChange,\r\n        handleSubmit,\r\n        handleReset\r\n    };\r\n};\r\n","/**\r\n * The NotificationContainer component. This is used to display alerts messages.\r\n * @author Anthony P. Pancerella\r\n */\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { AlertList } from 'react-bs-notifier';\r\nimport { useArray } from '../../../../../Lib/CustomHooks';\r\n\r\n/**\r\n * The NotificationContainer component.\r\n * @returns {React.Element}\r\n */\r\nconst NotificationContainer = () => {\r\n    const [position] = useState('top-right');\r\n    const alerts = useArray([]);\r\n    const [timeout] = useState(3000);\r\n    const notification = useSelector((state) => state.notification);\r\n\r\n    /**\r\n     * Removes the alert from the alert list.\r\n     * @param {Object} alert - the alert object\r\n     */\r\n    const onAlertDismissed = (alert) => {\r\n        const index = alerts.value.indexOf(alert);\r\n        if (index >= 0)\r\n            alerts.removeIndex(index);\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (Object.keys(notification).length) {\r\n            const { message } = notification;\r\n            let { level } = notification;\r\n\r\n            if (level === 'error')\r\n                level = 'danger';\r\n            const newAlert = {\r\n                id: (new Date()).getTime(),\r\n                type: level,\r\n                message: `${message} `\r\n            };\r\n\r\n            alerts.add(newAlert);\r\n        }\r\n    }, [notification]);\r\n\r\n    return (\r\n        <AlertList\r\n            position={position}\r\n            alerts={alerts.value}\r\n            timeout={timeout}\r\n            onDismiss={onAlertDismissed}\r\n        />\r\n    );\r\n};\r\n\r\nexport default NotificationContainer;\r\n","/* eslint-disable linebreak-style */\nimport React from 'react';\nimport proptypes from 'prop-types';\nimport FontAwesome from 'react-fontawesome';\nimport '../style.css';\n\n/**\n * The Textbox component.\n * @returns {React.Element}\n */\nconst Textbox = ({\n    name,\n    label,\n    value,\n    placeholder = '',\n    disabled = false,\n    labelPosition = 2,\n    inputPosition = 10,\n    onChangeFunction = null,\n    loading = false,\n    inputState = '',\n    errorMessage = ''\n}) => (\n    <div className=\"form-group row\">\n        <div className={`col-sm-${labelPosition} col-form-label`}>\n            <strong>{label === '' ? '' : `${label}:`}</strong>\n        </div>\n        <div className={`col-sm-${inputPosition}`}>\n            <input\n                name={name}\n                type=\"text\"\n                className={`form-control ${inputState}`}\n                placeholder={placeholder}\n                value={value}\n                disabled={disabled}\n                onChange={onChangeFunction}\n            />\n            <span className=\"feedback-icon\" hidden={!loading}><FontAwesome name=\"check\" spin className=\"fa fa-spinner\" /></span>\n            <div className=\"invalid-feedback d-block\">{errorMessage}</div>\n        </div>\n    </div>\n);\n\nTextbox.propTypes = {\n    name: proptypes.string.isRequired,\n    label: proptypes.string.isRequired,\n    value: proptypes.node.isRequired,\n    placeholder: proptypes.string,\n    disabled: proptypes.bool,\n    labelPosition: proptypes.number,\n    inputPosition: proptypes.number,\n    onChangeFunction: proptypes.func,\n    loading: proptypes.bool,\n    inputState: proptypes.oneOf(['', 'invalidFormInput', 'validFormInput']),\n    errorMessage: proptypes.string\n};\n\nexport default Textbox;\n","/**\r\n * This shows account details in a modal.\r\n * @author Anthony P. Pancerella\r\n */\r\n\r\nimport React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { Modal } from 'react-bootstrap';\r\nimport proptypes from 'prop-types';\r\nimport Textbox from '../../../../../../Lib/InputFields/Textbox';\r\n/**\r\n * The account modal.\r\n * @returns {React.Element}\r\n */\r\nconst AccountModal = ({ show = false, toggleFunc = null }) => {\r\n    const account = useSelector((state) => state.user.account);\r\n    return (\r\n        <>\r\n            <Modal size=\"lg\" show={show} onHide={() => toggleFunc(!show)}>\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>My Account</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <Textbox\r\n                        name=\"Company\"\r\n                        label=\"Company\"\r\n                        value={account.Company || ''}\r\n                        disabled\r\n                    />\r\n                    <Textbox\r\n                        name=\"Occupation\"\r\n                        label=\"Occupation\"\r\n                        value={account.Job || ''}\r\n                        disabled\r\n                    />\r\n                    <Textbox\r\n                        name=\"Salary\"\r\n                        label=\"Salary\"\r\n                        value={account.Salary || ''}\r\n                        disabled\r\n                    />\r\n                </Modal.Body>\r\n            </Modal>\r\n        </>\r\n    );\r\n};\r\n\r\nAccountModal.propTypes = {\r\n    show: proptypes.bool.isRequired,\r\n    toggleFunc: proptypes.func.isRequired\r\n};\r\n\r\nexport default AccountModal;\r\n","/* eslint-disable jsx-a11y/no-static-element-interactions */\r\n/* eslint-disable jsx-a11y/click-events-have-key-events */\r\n/* eslint-disable jsx-a11y/anchor-is-valid */\r\n/**\r\n * The site actions dropdown component\r\n * @author Anthony P. Pancerella\r\n */\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport AccountModal from '../AccountModal';\r\nimport './style.css';\r\n\r\n/**\r\n * The SiteActions component.\r\n * @returns {React.Element}\r\n */\r\nconst SiteActions = () => {\r\n    const dispatch = useDispatch();\r\n    const [showAccountModal, setShowAccountModal] = useState(false);\r\n    const userAccount = useSelector((state) => state.user.account);\r\n    const dropdownTitle = Object.keys(userAccount).length ? `Welcome, ${userAccount.User.FirstName} ${userAccount.User.LastName}` : 'Unknown User';\r\n\r\n    useEffect(() => {\r\n        dispatch.user.fetchUserAccount();\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"navbar-nav ml-auto\">\r\n            <ul className=\"navbar-nav\">\r\n                <li className=\"nav-item dropdown\">\r\n                    <a className=\"nav-link dropdown-toggle\" href=\"#\" id=\"navbarDropdown\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n                        {dropdownTitle}\r\n                    </a>\r\n                    <div className=\"dropdown-menu\" aria-labelledby=\"navbarDropdown\">\r\n                        <a className=\"dropdown-item\" onClick={() => setShowAccountModal(!showAccountModal)}>My Account</a>\r\n                        <div className=\"dropdown-divider\" />\r\n                        <a className=\"dropdown-item\">Administration</a>\r\n                        <a className=\"dropdown-item\">Settings</a>\r\n                    </div>\r\n                </li>\r\n            </ul>\r\n            <AccountModal show={showAccountModal} toggleFunc={(show) => setShowAccountModal(show)} />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SiteActions;\r\n","/**\r\n * Application config file.\r\n * @author Anthony P. Pancerella\r\n */\r\n\r\n/**\r\n * The configuration object.\r\n * @returns {Object}\r\n */\r\nconst AppEnvConfigs = (() => {\r\n    if (process.env.NODE_ENV === 'production')\r\n        return {\r\n            appName: 'Expense Tracker',\r\n            siteCollectionPath: '/ExpenseTracker',\r\n            apiDomain: ''\r\n        };\r\n\r\n    return {\r\n        appName: 'Expense Tracker',\r\n        siteCollectionPath: '/ExpenseTracker',\r\n        apiDomain: 'https://localhost:5001/api'\r\n    };\r\n})();\r\n\r\nexport default AppEnvConfigs;\r\n","/**\r\n * Navigation container component.\r\n * @author Anthony P. Pancerella\r\n */\r\nimport React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport SiteActions from './SiteActions';\r\nimport AppConfigs from '../../../../../Constants';\r\nimport './style.css';\r\n\r\n/**\r\n * The navigation container component.\r\n * @returns {React.Element}\r\n */\r\nconst NavigationContainer = () => {\r\n    return (\r\n        <>\r\n            <nav className=\"navbar navbar-expand-lg navbar-light bg-custom\">\r\n                <NavLink className=\"navbar-brand\" exact to={`${AppConfigs.siteCollectionPath}/`}>\r\n                    Expense Tracker\r\n                </NavLink>\r\n                <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#collapsedContent\" aria-expanded=\"false\">\r\n                    <span className=\"navbar-toggler-icon\" />\r\n                </button>\r\n\r\n                <div className=\"collapse navbar-collapse\" id=\"collapsedContent\">\r\n                    <ul className=\"navbar-nav mr-auto\">\r\n                        <NavLink className=\"nav-link\" exact to={`${AppConfigs.siteCollectionPath}/Home`}>\r\n                            Home\r\n                        </NavLink>\r\n                    </ul>\r\n                    <SiteActions />\r\n                </div>\r\n            </nav>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default NavigationContainer;\r\n","/**\r\n * The PageNotFound component. This is used as a default route when incorrect endpoints are in the URL.\r\n * @author Anthony P. Pancerella\r\n */\r\n\r\nimport React from 'react';\r\n\r\n/**\r\n * The page not found component.\r\n * @return {React.Element} the React component data.\r\n */\r\nconst PageNotFound = () => (\r\n    <div>\r\n        Page Not Found\r\n    </div>\r\n);\r\n\r\nexport default PageNotFound;\r\n","/**\r\n * Tile component to contain content\r\n * @author Anthony P. Pancerella\r\n */\r\nimport React from 'react';\r\nimport proptypes from 'prop-types';\r\nimport './style.css';\r\n\r\n/**\r\n * The Tile component.\r\n * @returns {React.Element}\r\n */\r\nconst Tile = ({ children }) => (\r\n    <div className=\"kt-portlet kt-portlet--height-fluid\">\r\n        <div className=\"kt-portlet__body kt-portlet__body--fluid\">\r\n            { children }\r\n        </div>\r\n    </div>\r\n);\r\n\r\nTile.propTypes = {\r\n    children: proptypes.element\r\n};\r\n\r\nexport default Tile;\r\n","import React from 'react';\r\nimport proptypes from 'prop-types';\r\nimport Tile from '../Tile';\r\nimport './style.css';\r\n\r\nconst InfoTile = ({ header, displayValue }) => {\r\n    \r\n    return(\r\n        <Tile>\r\n            <div className=\"row\">\r\n                <div className=\"col-md-12\">\r\n                    <div>\r\n                        <h6 style={{fontWeight: 'bold'}}>{ header }</h6>\r\n                    </div>\r\n                    <div>\r\n\r\n                    </div>\r\n                </div>\r\n                <div className=\"col-md-6\">\r\n                    <div  className=\"col-md-12\">\r\n                        <label style={{fontSize: 24}}>\r\n                            { displayValue }\r\n                        </label>\r\n                    </div>\r\n                    <div  className=\"col-md-6\">\r\n\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </Tile>\r\n    );\r\n}\r\n\r\nInfoTile.propTypes = {\r\n    header: proptypes.string.isRequired,\r\n    displayValue: proptypes.node.isRequired\r\n    // icon: proptypes.ch\r\n};\r\n\r\nexport default InfoTile;","import numeral from 'numeral';\r\n\r\nexport const commaFormatter = (val) => {\r\n    if(val === null || val === \"\") return 0;\r\n    return numeral(val).format('0,0');\r\n}\r\n\r\nexport const currencyFormatter = (val) => {\r\n    if(val === null || val === \"\") return 0;\r\n    return numeral(val).format('$0,0.00');\r\n}\r\n\r\nexport const commaDecimalFormatter = (val) => {\r\n    if(val === null || val === \"\") return 0;\r\n    return numeral(val).format('0,0.00');\r\n}\r\n\r\nexport const percentFormatter = (val) => {\r\n    if(val === null || val === \"\") return 0;\r\n    return numeral(val).format('0%');\r\n}\r\n\r\nexport const decimalFormatter = (val) => {\r\n    if(val === null || val === \"\") return \"\";\r\n    return numeral(val).format('0.00');\r\n}\r\n\r\nexport const percentDecimalFormatter = (val) => {\r\n    if(val === null || val === \"\") return \"\";\r\n    return numeral(val).format('0.00%');\r\n}\r\n\r\nexport const dateFormatter = (val) => {\r\n    if(val === null || val === \"\")\r\n        return \"\";\r\n    var date = new Date(val);\r\n    return (date.getMonth() + 1) + '/' + date.getDate() + '/' +  date.getFullYear();\r\n}\r\n","/**\r\n * Table SearchBar component\r\n * @author Anthony P. Pancerella\r\n */\r\nimport React from 'react';\r\n\r\n/**\r\n * The SearchBar component\r\n * @return {React.Element}\r\n */\r\nconst SearchBar = (props) => {\r\n    let input;\r\n\r\n    /**\r\n     * On update function\r\n     * @returns {Void}\r\n     */\r\n    const updateSearch = () => props.onSearch(input.value);\r\n    return (\r\n        <div style={{ marginBottom: 5 }}>\r\n            <input\r\n                className=\"form-control\"\r\n                ref={(n) => { input = n; }}\r\n                type=\"text\"\r\n                placeholder=\"Search...\"\r\n                onChange={updateSearch}\r\n                style={{ height: 30 }}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SearchBar;\r\n","/* eslint-disable max-len */\r\n/* eslint-disable react/jsx-wrap-multilines */\r\n/**\r\n * The table loading bar\r\n * @author Anthony P. Pancerella\r\n */\r\nimport React from 'react';\r\nimport proptypes from 'prop-types';\r\n\r\n/**\r\n * Table loading bar component.\r\n * @returns {React.Element}\r\n */\r\nconst LoadingBar = ({ isLoading = false }) => {\r\n    return (\r\n        <React.Fragment>\r\n            {\r\n                (isLoading) ?\r\n                    <div className=\"progress\">\r\n                        <div className=\"progress-bar progress-bar-striped progress-bar-animated\" role=\"progressbar\" style={{ width: '100%', backgroundRepeat: 'repeat' }}>\r\n                            Fetching Table Data\r\n                        </div>\r\n                    </div> : 'Table is Empty'\r\n            }\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nLoadingBar.propTypes = {\r\n    isLoading: proptypes.bool\r\n};\r\n\r\nexport default LoadingBar;","/* eslint-disable max-len */\r\n/* eslint-disable react/forbid-prop-types */\r\n/* eslint-disable react/prop-types */\r\n/**\r\n * The Table component.\r\n * @author Anthony P. Pancerella\r\n */\r\nimport React from 'react';\r\nimport proptypes from 'prop-types';\r\nimport BootstrapTable from 'react-bootstrap-table-next';\r\nimport paginationFactory from 'react-bootstrap-table2-paginator';\r\nimport ToolkitProvider from 'react-bootstrap-table2-toolkit';\r\nimport filterFactory from 'react-bootstrap-table2-filter';\r\nimport cellEditFactory from 'react-bootstrap-table2-editor';\r\nimport SearchBar from './SearchBar';\r\nimport LoadingBar from './LoadingBar';\r\nimport 'react-bootstrap-table2-filter/dist/react-bootstrap-table2-filter.min.css';\r\nimport './style.css';\r\n\r\n/**\r\n * The Table component definition\r\n * @returns {React.Element}\r\n */\r\nconst Table = ({ keyValue, columns = [], list = [], loading = false, isSearchable = true, expandContent = {}, csvFileName = '', cellEditOptions = {}, headerClass = '', isPageable = true }) => {\r\n    /**\r\n     * Render pagination function\r\n     * @returns {React.Element}\r\n     */\r\n    const pagination = ({ options, currSizePerPage, onSizePerPageChange }) => (\r\n        <div className=\"dropdown\">\r\n            <button className=\"btn btn-secondary dropdown-toggle\" type=\"button\" id=\"dropdownMenu2\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n                {currSizePerPage}\r\n            </button>\r\n            <div className=\"dropdown-menu\" aria-labelledby=\"dropdownMenu2\">\r\n                {\r\n                    options.map((option) => (<button key={option.text} className=\"dropdown-item\" type=\"button\" onClick={() => onSizePerPageChange(option.page)}>{option.text}</button>))\r\n                }\r\n            </div>\r\n        </div>\r\n    );\r\n    return (\r\n        <div style={{ marginBottom: -15 }}>\r\n            <ToolkitProvider\r\n                bootstrap4\r\n                keyField={keyValue}\r\n                data={list}\r\n                columns={columns}\r\n                exportCSV={{ fileName: csvFileName }}\r\n                search={{ searchFormatted: true }}\r\n            >\r\n                {\r\n                    (props) => (\r\n                        <div>\r\n                            <div>\r\n                                <div className=\"col-sm-8\" style={{ float: 'left', marginRight: '-15px', marginLeft: '-15px' }} />\r\n                                <div className=\"col-sm-4\" style={{ float: 'right', marginRight: '-15px', marginLeft: '-15px' }}>\r\n                                    { isSearchable ? <SearchBar {...props.searchProps} /> : null }\r\n                                </div>\r\n                            </div>\r\n                            <BootstrapTable\r\n                                {...props.baseProps}\r\n                                striped\r\n                                hover\r\n                                condensed\r\n                                filter={filterFactory()}\r\n                                pagination={isPageable ? paginationFactory({ pagination }) : null}\r\n                                noDataIndication={() => <LoadingBar isLoading={loading} />}\r\n                                cellEdit={cellEditFactory(cellEditOptions)}\r\n                                headerClasses={headerClass}\r\n                                expandRow={expandContent}\r\n                            />\r\n                        </div>\r\n                    )\r\n                }\r\n            </ToolkitProvider>\r\n        </div>\r\n    );\r\n};\r\n\r\nTable.propTypes = {\r\n    keyValue: proptypes.string.isRequired,\r\n    loading: proptypes.bool,\r\n    isSearchable: proptypes.bool,\r\n    isPageable: proptypes.bool,\r\n    csvFileName: proptypes.string,\r\n    csvExportFunc: proptypes.func,\r\n    btnRightFunc: proptypes.func,\r\n    btnRightColor: proptypes.string,\r\n    btnRightLabel: proptypes.string,\r\n    headerClass: proptypes.string,\r\n    cellEditOptions: proptypes.object,\r\n    expandContent: proptypes.object\r\n};\r\n\r\nexport default Table;\r\n","/* eslint-disable react/button-has-type */\r\n/**\r\n * Generic button component.\r\n * @author {React.Element}\r\n */\r\nimport React from 'react';\r\nimport proptypes from 'prop-types';\r\nimport FontAwesome from 'react-fontawesome';\r\nimport './style.css';\r\n\r\n/**\r\n * The Button component\r\n * @returns {React.Element}\r\n */\r\nconst Button = ({\r\n    color = 'primary', type = 'button', label = '', disabled = false,\r\n    btnPaddingTop = 6, btnPaddingBottom = 6, onClick = null, size = '',\r\n    icon = '', iconSpin = false\r\n}) => (\r\n    <button\r\n        className={`btn btn-${color} ${size}`}\r\n        type={type}\r\n        disabled={disabled}\r\n        style={{ paddingTop: btnPaddingTop, paddingBottom: btnPaddingBottom }}\r\n        onClick={() => {\r\n            if (onClick !== null)\r\n                onClick();\r\n        }}\r\n    >\r\n        <span>\r\n            <FontAwesome name={icon} spin={iconSpin} />\r\n            &nbsp;\r\n            {label}\r\n        </span>\r\n    </button>\r\n);\r\n\r\nButton.propTypes = {\r\n    color: proptypes.string,\r\n    type: proptypes.string,\r\n    label: proptypes.string,\r\n    disabled: proptypes.bool,\r\n    btnPaddingTop: proptypes.number,\r\n    btnPaddingBottom: proptypes.number,\r\n    onClick: proptypes.func,\r\n    size: proptypes.string,\r\n    icon: proptypes.string,\r\n    iconSpin: proptypes.bool\r\n};\r\n\r\nexport default Button;\r\n","/* eslint-disable react/forbid-prop-types */\r\n/**\r\n * Dropdown field component to be used in forms\r\n * @author Anthony P. Pancerella\r\n */\r\nimport React from 'react';\r\nimport proptypes from 'prop-types';\r\nimport Select from 'react-select';\r\nimport FontAwesome from 'react-fontawesome';\r\nimport 'react-select/dist/react-select.css';\r\nimport '../style.css';\r\n\r\n/**\r\n * The Dropdown component\r\n * @returns {React.Element}\r\n */\r\nconst Dropdown = ({\r\n    label,\r\n    value,\r\n    options,\r\n    onChangeFunction = null,\r\n    disabled = false,\r\n    loading = false,\r\n    placeholder = '',\r\n    displayField = '',\r\n    valueField = '',\r\n    labelPosition = 2,\r\n    inputPosition = 10,\r\n    isClearable = true,\r\n    isMultiselect = false,\r\n    errorMessage = ''\r\n}) => (\r\n    <div className=\"form-group row\">\r\n        <div className={`col-sm-${labelPosition}`}>\r\n            <strong>{`${label}:`}</strong>\r\n        </div>\r\n        <div className={`col-sm-${inputPosition}`}>\r\n            <Select\r\n                className={errorMessage ? 'invalidDropdown' : ''}\r\n                disabled={disabled}\r\n                multi={isMultiselect}\r\n                options={options.map((item) => ({ label: item[displayField], value: item[valueField] }))}\r\n                placeholder={placeholder || null}\r\n                simpleValue\r\n                isClearable={isClearable}\r\n                onChange={(option) => ((onChangeFunction) ? onChangeFunction(option) : null)}\r\n                value={value}\r\n            />\r\n            <div className=\"feedback-icon\" hidden={!loading}>\r\n                <FontAwesome name=\"check\" spin className=\"fa fa-spinner\" />\r\n            </div>\r\n            <div className=\"invalid-feedback d-block\">{errorMessage}</div>\r\n        </div>\r\n    </div>\r\n);\r\n\r\nDropdown.propTypes = {\r\n    label: proptypes.string.isRequired,\r\n    value: proptypes.node.isRequired,\r\n    options: proptypes.array.isRequired,\r\n    onChangeFunction: proptypes.func,\r\n    disabled: proptypes.bool,\r\n    loading: proptypes.bool,\r\n    placeholder: proptypes.string,\r\n    displayField: proptypes.string.isRequired,\r\n    valueField: proptypes.string.isRequired,\r\n    labelPosition: proptypes.number,\r\n    inputPosition: proptypes.number,\r\n    isClearable: proptypes.bool,\r\n    isMultiselect: proptypes.bool,\r\n    errorMessage: proptypes.string\r\n};\r\n\r\nexport default Dropdown;\r\n","/* eslint-disable object-curly-newline */\r\n/* eslint-disable react/forbid-prop-types */\r\n/**\r\n * This shows the create/edit income modal.\r\n * @author Anthony P. Pancerella\r\n */\r\n\r\nimport React, { useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { Modal } from 'react-bootstrap';\r\nimport proptypes from 'prop-types';\r\nimport Textbox from '../../../../Lib/InputFields/Textbox';\r\nimport Dropdown from '../../../../Lib/InputFields/Dropdown';\r\nimport Button from '../../../../Lib/Components/Button';\r\nimport { useForm } from '../../../../Lib/CustomHooks';\r\n\r\n/**\r\n * The IncomeModal component.\r\n * @returns {React.Element}\r\n */\r\nconst IncomeModal = ({ incomeId, show = false, toggleFunc = null }) => {\r\n    const dispatch = useDispatch();\r\n    const incomeTypes = useSelector((state) => state.income.incomeTypes);\r\n\r\n    /**\r\n     * Form validation function\r\n     * @param {*} values - the values object\r\n     * @returns {Object}\r\n     */\r\n    const validate = (values) => {\r\n        const errors = {};\r\n        if (!values.Name) errors.Name = 'Name is required';\r\n        if (!values.IncomeTypeId) errors.IncomeTypeId = 'Income type is required';\r\n\r\n        if (!values.Amount) errors.Amount = 'Amount is required';\r\n        else if (!(/^[0-9]+([,.][0-9]+)?$/g).test(values.Amount.toString())) errors.Amount = 'Value must be a valid number';\r\n\r\n        return errors;\r\n    };\r\n\r\n    /**\r\n     * Form submit function\r\n     * @param {*} values - the values object\r\n     */\r\n    const submit = (values) => {\r\n        if (incomeId === 0) dispatch.income.createIncomeEntry(values);\r\n        else dispatch.income.updateIncomeEntry(values);\r\n        toggleFunc(!show);\r\n    };\r\n\r\n    const defaultValues = useSelector((state) => ((incomeId === 0) ? {} : state.income.monthlyIncomeList.find((item) => item.Id === incomeId)));\r\n\r\n    const { formValues, errors, handleChange, handleSubmit, handleReset } = useForm(defaultValues, validate, submit);\r\n\r\n    /**\r\n     * Resets the form when the income id changes\r\n     */\r\n    useEffect(() => { handleReset(); }, [incomeId]);\r\n    useEffect(() => { dispatch.income.fetchIncomeTypes(); }, []);\r\n\r\n    return (\r\n        <>\r\n            <Modal size=\"lg\" show={show} onHide={() => { toggleFunc(!show); handleReset(); }}>\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>{incomeId === 0 ? 'Create New Income' : 'Edit Income'}</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <form onSubmit={handleSubmit}>\r\n                        <Textbox\r\n                            name=\"Name\"\r\n                            label=\"Name\"\r\n                            onChangeFunction={handleChange}\r\n                            value={formValues.Name || ''}\r\n                            inputState={(errors.Name) ? 'invalidFormInput' : ''}\r\n                            errorMessage={errors.Name}\r\n                        />\r\n                        <Dropdown\r\n                            label=\"Income Type\"\r\n                            options={incomeTypes}\r\n                            displayField=\"IncomeType\"\r\n                            valueField=\"Id\"\r\n                            value={formValues.IncomeTypeId || 0}\r\n                            onChangeFunction={(event) => {\r\n                                handleChange({\r\n                                    type: 'dropdown',\r\n                                    target: {\r\n                                        name: 'IncomeTypeId',\r\n                                        value: event\r\n                                    }\r\n                                });\r\n                            }}\r\n                            errorMessage={errors.IncomeTypeId}\r\n                        />\r\n                        <Textbox\r\n                            name=\"Amount\"\r\n                            label=\"Amount\"\r\n                            onChangeFunction={handleChange}\r\n                            value={formValues.Amount || ''}\r\n                            inputState={(errors.Amount) ? 'invalidFormInput' : ''}\r\n                            errorMessage={errors.Amount}\r\n                        />\r\n                        <Textbox\r\n                            name=\"Description\"\r\n                            label=\"Description\"\r\n                            onChangeFunction={handleChange}\r\n                            value={formValues.Description || ''}\r\n                            inputState={(errors.Description) ? 'invalidFormInput' : ''}\r\n                            errorMessage={errors.Description}\r\n                        />\r\n                        <div className=\"col-md-12\" style={{ textAlign: 'center' }}>\r\n                            <Button\r\n                                color=\"primary\"\r\n                                type=\"submit\"\r\n                                label={incomeId === 0 ? 'Create' : 'Update'}\r\n                                btnPaddingTop={2}\r\n                                btnPaddingBottom={2}\r\n                            />\r\n                            &nbsp;&nbsp;\r\n                            <Button\r\n                                color=\"warning\"\r\n                                type=\"button\"\r\n                                label=\"Reset\"\r\n                                onClick={handleReset}\r\n                                btnPaddingTop={2}\r\n                                btnPaddingBottom={2}\r\n                            />\r\n                        </div>\r\n                    </form>\r\n                </Modal.Body>\r\n            </Modal>\r\n        </>\r\n    );\r\n};\r\n\r\nIncomeModal.propTypes = {\r\n    incomeId: proptypes.number.isRequired,\r\n    show: proptypes.bool.isRequired,\r\n    toggleFunc: proptypes.func.isRequired\r\n};\r\n\r\nexport default IncomeModal;\r\n","/**\r\n * The dashboard income table display.\r\n * @author Anthony P. Pancerella\r\n */\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { currencyFormatter } from '../../../../Lib/Formatters';\r\nimport Table from '../../../../Lib/Table';\r\nimport Button from '../../../../Lib/Components/Button';\r\nimport IncomeModal from '../IncomeModal';\r\nimport './style.css';\r\n\r\n/**\r\n * The IncomeTable component.\r\n * @returns {React.Element}\r\n */\r\nconst MonthlyIncomeTable = () => {\r\n    const dispatch = useDispatch();\r\n    const [showIncomeModal, setShowIncomeModal] = useState(false);\r\n    const [incomeId, setIncomeId] = useState(0);\r\n    const monthlyIncomeList = useSelector((state) => state.income.monthlyIncomeList);\r\n\r\n    useEffect(() => {\r\n        dispatch.income.fetchMonthlyIncomes();\r\n    }, []);\r\n\r\n    const tableOutline = [{\r\n        dataField: 'Id',\r\n        text: 'Id',\r\n        hidden: true,\r\n        sort: true,\r\n        headerStyle: { whiteSpace: 'pre-wrap' },\r\n        headerAlign: 'center',\r\n        align: 'center'\r\n    },\r\n    {\r\n        dataField: 'Name',\r\n        text: 'Name',\r\n        sort: true,\r\n        headerStyle: { whiteSpace: 'pre-wrap' },\r\n        headerAlign: 'center',\r\n        align: 'center'\r\n    },\r\n    {\r\n        dataField: 'Amount',\r\n        text: 'Amount',\r\n        sort: true,\r\n        headerStyle: { whiteSpace: 'pre-wrap' },\r\n        headerAlign: 'center',\r\n        align: 'center',\r\n        formatter: currencyFormatter\r\n    },\r\n    {\r\n        dataField: '1',\r\n        text: 'Edit',\r\n        sort: true,\r\n        headerStyle: { whiteSpace: 'pre-wrap' },\r\n        headerAlign: 'center',\r\n        align: 'center',\r\n        formatter: (cell, row) => (\r\n            <Button\r\n                color=\"primary\"\r\n                type=\"button\"\r\n                label=\"Edit\"\r\n                onClick={() => {\r\n                    setIncomeId(row.Id);\r\n                    setShowIncomeModal(!showIncomeModal);\r\n                }}\r\n                btnPaddingTop={0}\r\n                btnPaddingBottom={0}\r\n                icon=\"edit\"\r\n            />\r\n        )\r\n    },\r\n    {\r\n        dataField: '2',\r\n        text: 'Delete',\r\n        headerStyle: { whiteSpace: 'pre-wrap' },\r\n        headerAlign: 'center',\r\n        align: 'center',\r\n        formatter: (cell, row) => (\r\n            <Button\r\n                color=\"danger\"\r\n                type=\"button\"\r\n                label=\"Delete\"\r\n                onClick={() => dispatch.income.deleteIncomeEntry(row.Id)}\r\n                btnPaddingTop={0}\r\n                btnPaddingBottom={0}\r\n                icon=\"trash-alt\"\r\n            />\r\n        )\r\n    }];\r\n    return (\r\n        <>\r\n            <div style={{textAlign: 'center'}}>\r\n                <h5 style={{fontWeight: 'bold'}}>Monthly Incomes</h5>\r\n            </div>\r\n            <Button\r\n                color=\"success\"\r\n                type=\"button\"\r\n                label=\"Create New\"\r\n                onClick={() => {\r\n                    setIncomeId(0);\r\n                    setShowIncomeModal(!showIncomeModal);\r\n                }}\r\n                btnPaddingTop={2}\r\n                btnPaddingBottom={2}\r\n                icon=\"plus\"\r\n            />\r\n            <Table\r\n                keyValue=\"Id\"\r\n                columns={tableOutline}\r\n                list={monthlyIncomeList}\r\n                loading={false}\r\n            />\r\n            <IncomeModal\r\n                incomeId={incomeId}\r\n                show={showIncomeModal}\r\n                toggleFunc={(show) => {\r\n                    setShowIncomeModal(show);\r\n                    setIncomeId(0);\r\n                }}\r\n            />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default MonthlyIncomeTable;\r\n","/* eslint-disable complexity */\r\n/* eslint-disable object-curly-newline */\r\n/* eslint-disable react/forbid-prop-types */\r\n/**\r\n * This shows the create/edit expense modal.\r\n * @author Anthony P. Pancerella\r\n */\r\n\r\nimport React, { useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { Modal } from 'react-bootstrap';\r\nimport proptypes from 'prop-types';\r\nimport Textbox from '../../../../Lib/InputFields/Textbox';\r\nimport Button from '../../../../Lib/Components/Button';\r\nimport Dropdown from '../../../../Lib/InputFields/Dropdown';\r\nimport { useForm } from '../../../../Lib/CustomHooks';\r\n\r\n/**\r\n * The ExpenseModal component.\r\n * @returns {React.Element}\r\n */\r\nconst ExpenseModal = ({ expenseId = 0, show = false, toggleFunc = null }) => {\r\n    const dispatch = useDispatch();\r\n    const expenseTypes = useSelector((state) => state.expense.expenseTypes)\r\n\r\n    /**\r\n     * Form validation function\r\n     * @param {*} values - the values object\r\n     * @returns {Object}\r\n     */\r\n    const validate = (values) => {\r\n        const errors = {};\r\n        if (!values.Name) errors.Name = 'Name is required';\r\n\r\n        if (!values.ExpenseTypeId) errors.ExpenseTypeId = 'Expense type is required';\r\n\r\n        if (!values.Amount) errors.Amount = 'Amount is required';\r\n        else if (!(/^[0-9]+([,.][0-9]+)?$/g).test(values.Amount.toString())) errors.Amount = 'Value must be a valid number';\r\n\r\n        return errors;\r\n    };\r\n\r\n    /**\r\n     * Form submit function\r\n     * @param {*} values - the values object\r\n     */\r\n    const submit = (values) => {\r\n        if (expenseId === 0) dispatch.expense.createExpenseEntry(values);\r\n        else dispatch.expense.updateExpenseEntry(values);\r\n        toggleFunc(!show);\r\n    };\r\n\r\n    const defaultValues = useSelector((state) => ((expenseId === 0) ? {} : state.expense.monthlyExpenseList.find((item) => item.Id === expenseId)));\r\n\r\n    const { formValues, errors, handleChange, handleSubmit, handleReset } = useForm(defaultValues, validate, submit);\r\n\r\n    useEffect(() => { handleReset(); }, [expenseId]);\r\n    useEffect(() => { dispatch.expense.fetchExpenseTypes(); }, []);\r\n\r\n    return (\r\n        <>\r\n            <Modal size=\"lg\" show={show} onHide={() => { toggleFunc(!show); handleReset(); }}>\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>{expenseId === 0 ? 'Create New Expense' : 'Edit Expense'}</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <form onSubmit={handleSubmit}>\r\n                        <Textbox\r\n                            name=\"Name\"\r\n                            label=\"Name\"\r\n                            onChangeFunction={handleChange}\r\n                            value={formValues.Name || ''}\r\n                            inputState={(errors.Name) ? 'invalidFormInput' : ''}\r\n                            errorMessage={errors.Name}\r\n                        />\r\n                        <Dropdown\r\n                            label=\"Expense Type\"\r\n                            options={expenseTypes}\r\n                            displayField=\"ExpenseType\"\r\n                            valueField=\"Id\"\r\n                            value={formValues.ExpenseTypeId || 0}\r\n                            onChangeFunction={(event) => {\r\n                                handleChange({\r\n                                    type: 'dropdown',\r\n                                    target: {\r\n                                        name: 'ExpenseTypeId',\r\n                                        value: event\r\n                                    }\r\n                                });\r\n                            }}\r\n                            errorMessage={errors.ExpenseTypeId}\r\n                        />\r\n                        <Textbox\r\n                            name=\"Amount\"\r\n                            label=\"Amount\"\r\n                            onChangeFunction={handleChange}\r\n                            value={formValues.Amount || ''}\r\n                            inputState={(errors.Amount) ? 'invalidFormInput' : ''}\r\n                            errorMessage={errors.Amount}\r\n                        />\r\n                        <Textbox\r\n                            name=\"Description\"\r\n                            label=\"Description\"\r\n                            onChangeFunction={handleChange}\r\n                            value={formValues.Description || ''}\r\n                            inputState={(errors.Description) ? 'invalidFormInput' : ''}\r\n                            errorMessage={errors.Description}\r\n                        />\r\n                        <div className=\"col-md-12\" style={{ textAlign: 'center' }}>\r\n                            <Button\r\n                                color=\"primary\"\r\n                                type=\"submit\"\r\n                                label={expenseId === 0 ? 'Create' : 'Update'}\r\n                                btnPaddingTop={2}\r\n                                btnPaddingBottom={2}\r\n                            />\r\n                            &nbsp;&nbsp;\r\n                            <Button\r\n                                color=\"warning\"\r\n                                type=\"button\"\r\n                                label=\"Reset\"\r\n                                onClick={handleReset}\r\n                                btnPaddingTop={2}\r\n                                btnPaddingBottom={2}\r\n                            />\r\n                        </div>\r\n                    </form>\r\n                </Modal.Body>\r\n            </Modal>\r\n        </>\r\n    );\r\n};\r\n\r\nExpenseModal.propTypes = {\r\n    expenseId: proptypes.number.isRequired,\r\n    show: proptypes.bool.isRequired,\r\n    toggleFunc: proptypes.func.isRequired\r\n};\r\n\r\nexport default ExpenseModal;\r\n","/**\r\n * The dashboard expense table display.\r\n * @author Anthony P. Pancerella\r\n */\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { currencyFormatter } from '../../../../Lib/Formatters';\r\nimport Table from '../../../../Lib/Table';\r\nimport Button from '../../../../Lib/Components/Button';\r\nimport ExpenseModal from '../ExpenseModal';\r\nimport './style.css';\r\n\r\n/**\r\n * The ExpenseTable component.\r\n * @returns {React.Element}\r\n */\r\nconst MonthlyExpenseTable = () => {\r\n    const dispatch = useDispatch();\r\n    const [showExpenseModal, setShowExpenseModal] = useState(false);\r\n    const [expenseId, setExpenseId] = useState(0);\r\n    const monthlyExpenseList = useSelector((state) => state.expense.monthlyExpenseList);\r\n\r\n    useEffect(() => {\r\n        dispatch.expense.fetchMonthlyExpenses();\r\n    }, []);\r\n\r\n    const tableOutline = [{\r\n        dataField: 'Id',\r\n        text: 'Id',\r\n        hidden: true,\r\n        sort: true,\r\n        headerStyle: { whiteSpace: 'pre-wrap' },\r\n        headerAlign: 'center',\r\n        align: 'center'\r\n    },\r\n    {\r\n        dataField: 'Name',\r\n        text: 'Name',\r\n        sort: true,\r\n        headerStyle: { whiteSpace: 'pre-wrap' },\r\n        headerAlign: 'center',\r\n        align: 'center'\r\n    },\r\n    {\r\n        dataField: 'ExpenseType.ExpenseType',\r\n        text: 'Type',\r\n        sort: true,\r\n        headerStyle: { whiteSpace: 'pre-wrap' },\r\n        headerAlign: 'center',\r\n        align: 'center'\r\n    },\r\n    {\r\n        dataField: 'Amount',\r\n        text: 'Amount',\r\n        sort: true,\r\n        headerStyle: { whiteSpace: 'pre-wrap' },\r\n        headerAlign: 'center',\r\n        align: 'center',\r\n        formatter: currencyFormatter\r\n    },\r\n    {\r\n        dataField: '1',\r\n        text: 'Edit',\r\n        sort: true,\r\n        headerStyle: { whiteSpace: 'pre-wrap' },\r\n        headerAlign: 'center',\r\n        align: 'center',\r\n        formatter: (cell, row) => (\r\n            <Button\r\n                color=\"primary\"\r\n                type=\"button\"\r\n                label=\"Edit\"\r\n                onClick={() => {\r\n                    setExpenseId(row.Id);\r\n                    setShowExpenseModal(!showExpenseModal);\r\n                }}\r\n                btnPaddingTop={0}\r\n                btnPaddingBottom={0}\r\n                icon=\"edit\"\r\n            />\r\n        )\r\n    },\r\n    {\r\n        dataField: '2',\r\n        text: 'Delete',\r\n        headerStyle: { whiteSpace: 'pre-wrap' },\r\n        headerAlign: 'center',\r\n        align: 'center',\r\n        formatter: (cell, row) => (\r\n            <Button\r\n                color=\"danger\"\r\n                type=\"button\"\r\n                label=\"Delete\"\r\n                onClick={() => dispatch.expense.deleteExpenseEntry(row.Id)}\r\n                btnPaddingTop={0}\r\n                btnPaddingBottom={0}\r\n                icon=\"trash-alt\"\r\n            />\r\n        )\r\n    }];\r\n    return (\r\n        <>\r\n            <div style={{textAlign: 'center'}}>\r\n                <h5 style={{fontWeight: 'bold'}}>Monthly Expenses</h5>\r\n            </div>\r\n            <Button\r\n                color=\"success\"\r\n                type=\"button\"\r\n                label=\"Create New\"\r\n                onClick={() => {\r\n                    setExpenseId(0);\r\n                    setShowExpenseModal(!showExpenseModal);\r\n                }}\r\n                btnPaddingTop={2}\r\n                btnPaddingBottom={2}\r\n                icon=\"plus\"\r\n            />\r\n            <Table\r\n                keyValue=\"Id\"\r\n                columns={tableOutline}\r\n                list={monthlyExpenseList}\r\n                loading={false}\r\n            />\r\n            <ExpenseModal\r\n                expenseId={expenseId}\r\n                show={showExpenseModal}\r\n                toggleFunc={(show) => {\r\n                    setShowExpenseModal(show);\r\n                    setExpenseId(0);\r\n                }}\r\n            />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default MonthlyExpenseTable;\r\n","import { createSelector } from 'reselect';\r\n\r\n/**\r\n * The root state.\r\n * @param {*} state - the state object.\r\n * @returns {ImmutableState}\r\n */\r\nconst getState = (state) => state;\r\n\r\nexport const getProjectionChartData = createSelector(\r\n    getState,\r\n    (state) => {\r\n        const incomeChartObject = {\r\n            name: 'Income Summation',\r\n            type: 'bar',\r\n            data: [state.income.monthlyIncomeList.reduce((a, b) => a + b.Amount, 0)],\r\n            zIndex: 1\r\n        };\r\n\r\n        const expenseChartObject = {\r\n            name: 'Expense Summation',\r\n            type: 'bar',\r\n            data: [state.expense.monthlyExpenseList.reduce((a, b) => a + b.Amount, 0)],\r\n            zIndex: 1\r\n        };\r\n\r\n        return [incomeChartObject, expenseChartObject];\r\n    }\r\n);\r\n","/**\r\n * DCSO chart that displays current metrics of a plan as a graph.\r\n * @author Anthony P. Pancerella\r\n * @version August 27, 2018\r\n */\r\n\r\nimport React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { getProjectionChartData } from '../../services/selectors';\r\n\r\nvar ReactHighcharts = require('react-highcharts');\r\nvar HighchartsMore = require('highcharts-more');\r\nHighchartsMore(ReactHighcharts.Highcharts);\r\n\r\nvar HighchartsExporting = require('highcharts-exporting');\r\nHighchartsExporting(ReactHighcharts.Highcharts);\r\n\r\n\r\nconst ProjectionChart = () => {\r\n    const chartData = useSelector(state => getProjectionChartData(state));\r\n    const monthArray = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\r\n\r\n    let date = new Date();\r\n    let currMonth = date.getMonth();\r\n    let options = {\r\n        chart: {\r\n            type: 'line',\r\n            height: '200',\r\n            align: 'center'\r\n        },\r\n        title: {\r\n            text: 'Monthly Income/Expense Totals'\r\n        },\r\n        xAxis: {\r\n            categories: [monthArray[currMonth], monthArray[currMonth + 1], monthArray[currMonth + 2], monthArray[currMonth + 3], monthArray[currMonth + 4]]\r\n        },\r\n        yAxis: {\r\n            title: null,\r\n            reversedStacks: false\r\n        },\r\n        exporting: {\r\n            enabled: true,\r\n            sourceHeight: '500',\r\n            sourceWidth: '1000'\r\n        },\r\n        plotOptions: {\r\n            column: {\r\n                stacking: 'normal'\r\n            }\r\n        },\r\n        legend: {\r\n            align: 'right',\r\n            verticalAlign: 'middle',\r\n            layout: 'vertical'\r\n        },\r\n        series: chartData,\r\n        colors: ['#617487', '#1B502B']\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div>\r\n                <ReactHighcharts config={options}></ReactHighcharts>\r\n                <br/>\r\n            </div>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default ProjectionChart;","/**\r\n * The Home page component of the app.\r\n * This acts as a dashboard\r\n * @author Anthony P. Pancerella\r\n */\r\nimport React, { useState, useCallback } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport InfoTile from '../../../../Lib/Components/InfoTile';\r\nimport Tile from '../../../../Lib/Components/Tile';\r\nimport MonthlyIncomeTable from '../../../Income/components/MonthlyIncomeTable';\r\nimport MonthlyExpenseTable from '../../../Expense/components/MonthlyExpenseTable';\r\nimport ProjectionChart from '../ProjectionChart';\r\nimport './style.css';\r\nimport { currencyFormatter, percentDecimalFormatter } from '../../../../Lib/Formatters';\r\n\r\n/**\r\n * The Home component.\r\n * @returns {React.Element}\r\n */\r\nconst Home = () => {\r\n    const savingsGoal = 500;\r\n    const totalMonthlyIncome = useSelector((state) => state.income.monthlyIncomeList.reduce((prev, curr) => (prev + parseInt(curr.Amount)), 0));\r\n    const totalMonthlyExpense = useSelector((state) => state.expense.monthlyExpenseList.reduce((prev, curr) => (prev + parseInt(curr.Amount)), 0));\r\n    const savingsGoalStatus = (totalMonthlyIncome - totalMonthlyExpense) / savingsGoal;\r\n    const yearlySavings = (totalMonthlyIncome - totalMonthlyExpense) * 12;\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"row\" style={{ paddingTop: 15 }}>\r\n                <div className=\"col-lg-6 col-xl-6 order-lg-1 order-xl-1\">\r\n                    <div className=\"row\" style={{ paddingTop: 15 }}>\r\n                    <div className=\"col-lg-6 col-xl-6 order-lg-1 order-xl-1\">\r\n                            <InfoTile \r\n                                header={'Total Monthly Income'}\r\n                                displayValue={currencyFormatter(totalMonthlyIncome)}\r\n                                topRight={''}\r\n                            />\r\n                        </div>\r\n                        <div className=\"col-lg-6 col-xl-6 order-lg-2 order-xl-2\">\r\n                            <InfoTile \r\n                                header={'Total Monthly Expense'}\r\n                                displayValue={currencyFormatter(totalMonthlyExpense)}\r\n                                topRight={''}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row\" style={{ paddingTop: 15 }}>\r\n                        <div className=\"col-lg-6 col-xl-6 order-lg-1 order-xl-1\">\r\n                            <InfoTile \r\n                                header={'Savings Goal Status'}\r\n                                displayValue={percentDecimalFormatter(savingsGoalStatus)}\r\n                            />\r\n                        </div>\r\n                        <div className=\"col-lg-6 col-xl-6 order-lg-2 order-xl-2\">\r\n                            <InfoTile \r\n                                header={'Yearly Savings'}\r\n                                displayValue={currencyFormatter(yearlySavings)}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"col-lg-6 col-xl-6 order-lg-1 order-xl-1\" style={{ paddingTop: 15 }}>\r\n                    <Tile>\r\n                        <ProjectionChart />\r\n                    </Tile>\r\n                </div>\r\n            </div>\r\n            <div className=\"row\" style={{ paddingTop: 15 }}>\r\n                <div className=\"col-lg-6 col-xl-6 order-lg-1 order-xl-1\">\r\n                    <Tile>\r\n                        <MonthlyIncomeTable />\r\n                    </Tile>\r\n                </div>\r\n                <div className=\"col-lg-6 col-xl-6 order-lg-2 order-xl-2\">\r\n                    <Tile>\r\n                        <MonthlyExpenseTable />\r\n                    </Tile>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Home;\r\n","/**\r\n * The App component. This will render the base App component.\r\n * @author Anthony P. Pancerella\r\n */\r\n\r\nimport React from 'react';\r\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\r\nimport NotificationContainer from './NotificationContainer';\r\nimport NavigationContainer from './NavigationContainer';\r\nimport PageNotFound from './PageNotFound';\r\nimport Home from '../../../Home/components/Dashboard';\r\nimport { useDocumentTitle } from '../../../../Lib/CustomHooks';\r\nimport AppConfigs from '../../../../Constants';\r\nimport './style.css';\r\n\r\n/**\r\n * The App component.\r\n * @returns {React.Element} the React component data\r\n */\r\nconst App = () => {\r\n    useDocumentTitle(`${AppConfigs.appName}`);\r\n    return (\r\n        <div className=\"appContainer\">\r\n            <Router>\r\n                <NotificationContainer />\r\n                <NavigationContainer />\r\n                <Switch>\r\n                    <Route exact path={`${AppConfigs.siteCollectionPath}/`} render={() => <Home />} />\r\n                    <Route path={`${AppConfigs.siteCollectionPath}/Home`} render={() => <Home />} />\r\n                    <Route render={() => <PageNotFound />} />\r\n                </Switch>\r\n            </Router>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","const notification = {\r\n    state: { },\r\n    reducers: {\r\n        addSuccessNotification(state, message) {\r\n            return {\r\n                ...state,\r\n                message,\r\n                level: 'success'\r\n            };\r\n        },\r\n        addWarningNotification(state, message) {\r\n            return {\r\n                ...state,\r\n                message,\r\n                level: 'warning'\r\n            };\r\n        },\r\n        addErrorNotification(state, message) {\r\n            return {\r\n                ...state,\r\n                message,\r\n                level: 'error'\r\n            };\r\n        }\r\n    }\r\n};\r\n\r\nexport default notification;\r\n","/* eslint-disable valid-jsdoc */\r\n/**\r\n * Series of formatted REST api requests (used by sagas).\r\n * @author Anthony P. Pancerella\r\n */\r\n\r\n\r\n/**\r\n * Http request functions\r\n */\r\nexport default class apiCalls {\r\n    static Get = async (action) => {\r\n        const response = await fetch(action.url, {\r\n            method: 'get',\r\n            credentials: 'include',\r\n            accept: 'gzip',\r\n            headers: {\r\n                'Cache-Control': 'no-cache',\r\n                pragma: 'no-cache'\r\n            }\r\n        });\r\n        if (response.status >= 400)\r\n            throw response;\r\n\r\n        return response.json();\r\n    }\r\n\r\n    static Post = async (action) => {\r\n        const response = await fetch(action.url, {\r\n            method: 'post',\r\n            credentials: 'include',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                Accept: 'application/json',\r\n                'Cache-Control': 'no-cache',\r\n                pragma: 'no-cache'\r\n            },\r\n            body: JSON.stringify(action.body)\r\n        });\r\n        if (response.status >= 400)\r\n            throw response;\r\n    }\r\n\r\n    static Put = async (action) => {\r\n        const response = await fetch(action.url, {\r\n            method: 'put',\r\n            credentials: 'include',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                Accept: 'application/json',\r\n                'Cache-Control': 'no-cache',\r\n                pragma: 'no-cache'\r\n            },\r\n            body: JSON.stringify(action.body)\r\n        });\r\n        if (response.status >= 400)\r\n            throw response;\r\n    }\r\n\r\n    static Delete = async (action) => {\r\n        const response = await fetch(action.url, {\r\n            method: 'delete',\r\n            credentials: 'include',\r\n            headers: {\r\n                'Cache-Control': 'no-cache',\r\n                pragma: 'no-cache'\r\n            }\r\n        });\r\n        if (response.status >= 400)\r\n            throw response;\r\n    }\r\n}\r\n","import Api from '../../../Lib/ApiCalls';\r\nimport Constants from '../../../Constants';\r\nimport { Account_Seed } from '../../../Seed_Data';\r\nconst apiEndpoint = `${Constants.apiDomain}/Accounts`;\r\n\r\nconst user = {\r\n    state: {\r\n        account: Account_Seed\r\n        // account: {}\r\n    },\r\n    reducers: {\r\n        populateAccount(state, account) {\r\n            return {\r\n                ...state,\r\n                account: account\r\n            };\r\n        }\r\n    },\r\n    effects: (dispatch) => ({\r\n        async fetchUserAccount(payload, state) {\r\n            try {\r\n                // this.populateAccount(\r\n                //     await Api.Get({ url: `${apiEndpoint}/1` })\r\n                // );\r\n            } catch (error) {\r\n                dispatch.notification.addErrorNotification(`Unable`)\r\n            }\r\n        }\r\n    })\r\n};\r\n\r\nexport default user;","export const Account_Seed = {\r\n      \"UserId\": 1,\r\n      \"User\": {\r\n        \"RoleId\": 1,\r\n        \"Role\": {\r\n          \"Role\": \"Administrator\",\r\n          \"Id\": 1\r\n        },\r\n        \"FirstName\": \"Anthony\",\r\n        \"MiddleName\": \"Patrick\",\r\n        \"LastName\": \"Pancerella\",\r\n        \"Email\": \"test@test.com\",\r\n        \"ModifiedDate\": null,\r\n        \"ModifiedBy\": null,\r\n        \"DateOfBirth\": \"1900-01-01T00:00:00\",\r\n        \"Phone\": \"7031231234\",\r\n        \"Id\": 1\r\n      },\r\n      \"Salary\": 50000,\r\n      \"Job\": \"Software Developer\",\r\n      \"Company\": \"National Rural Electric Cooperative Association\",\r\n      \"Id\": 1\r\n    };\r\n\r\nexport const ExpenseTypes_Seed = [\r\n    {\r\n      \"ExpenseType\": \"Transportation\",\r\n      \"Id\": 1\r\n    },\r\n    {\r\n      \"ExpenseType\": \"Food\",\r\n      \"Id\": 2\r\n    },\r\n    {\r\n      \"ExpenseType\": \"Utilities\",\r\n      \"Id\": 3\r\n    },\r\n    {\r\n      \"ExpenseType\": \"Clothing\",\r\n      \"Id\": 4\r\n    },\r\n    {\r\n      \"ExpenseType\": \"Medical/Healthcare\",\r\n      \"Id\": 5\r\n    },\r\n    {\r\n      \"ExpenseType\": \"Insurance\",\r\n      \"Id\": 6\r\n    },\r\n    {\r\n      \"ExpenseType\": \"Household Items/Supplies\",\r\n      \"Id\": 7\r\n    },\r\n    {\r\n      \"ExpenseType\": \"Personal\",\r\n      \"Id\": 8\r\n    },\r\n    {\r\n      \"ExpenseType\": \"Debt\",\r\n      \"Id\": 9\r\n    },\r\n    {\r\n      \"ExpenseType\": \"Retirement\",\r\n      \"Id\": 10\r\n    },\r\n    {\r\n      \"ExpenseType\": \"Education\",\r\n      \"Id\": 11\r\n    },\r\n    {\r\n      \"ExpenseType\": \"Savings\",\r\n      \"Id\": 12\r\n    },\r\n    {\r\n      \"ExpenseType\": \"Gifts/Donations\",\r\n      \"Id\": 13\r\n    },\r\n    {\r\n      \"ExpenseType\": \"Entertainment \",\r\n      \"Id\": 14\r\n    },\r\n    {\r\n      \"ExpenseType\": \"Housing\",\r\n      \"Id\": 15\r\n    }\r\n  ];\r\n\r\nexport const IncomeTypes_Seed = [\r\n    {\r\n      \"IncomeType\": \"Stocks\",\r\n      \"Id\": 1\r\n    },\r\n    {\r\n      \"IncomeType\": \"Salary\",\r\n      \"Id\": 2\r\n    }\r\n  ];\r\n\r\nexport const MonthlyExpenses_Seed = [\r\n    {\r\n      \"ExpenseTypeId\": 14,\r\n      \"ExpenseType\": {\r\n        \"ExpenseType\": \"Entertainment \",\r\n        \"Id\": 14\r\n      },\r\n      \"Name\": \"Netflix\",\r\n      \"Amount\": 11.99,\r\n      \"Description\": \"\",\r\n      \"Id\": 2008\r\n    },\r\n    {\r\n      \"ExpenseTypeId\": 14,\r\n      \"ExpenseType\": {\r\n        \"ExpenseType\": \"Entertainment \",\r\n        \"Id\": 14\r\n      },\r\n      \"Name\": \"Hulu\",\r\n      \"Amount\": 45,\r\n      \"Description\": \"\",\r\n      \"Id\": 2009\r\n    },\r\n    {\r\n      \"ExpenseTypeId\": 15,\r\n      \"ExpenseType\": {\r\n        \"ExpenseType\": \"Housing\",\r\n        \"Id\": 15\r\n      },\r\n      \"Name\": \"Apartment Rent\",\r\n      \"Amount\": 1210,\r\n      \"Description\": \"\",\r\n      \"Id\": 2010\r\n    },\r\n    {\r\n      \"ExpenseTypeId\": 12,\r\n      \"ExpenseType\": {\r\n        \"ExpenseType\": \"Savings\",\r\n        \"Id\": 12\r\n      },\r\n      \"Name\": \"Roth IRA\",\r\n      \"Amount\": 50,\r\n      \"Description\": \"\",\r\n      \"Id\": 2011\r\n    },\r\n    {\r\n      \"ExpenseTypeId\": 3,\r\n      \"ExpenseType\": {\r\n        \"ExpenseType\": \"Utilities\",\r\n        \"Id\": 3\r\n      },\r\n      \"Name\": \"Utilities\",\r\n      \"Amount\": 130,\r\n      \"Description\": \"\",\r\n      \"Id\": 2012\r\n    },\r\n    {\r\n      \"ExpenseTypeId\": 14,\r\n      \"ExpenseType\": {\r\n        \"ExpenseType\": \"Entertainment \",\r\n        \"Id\": 14\r\n      },\r\n      \"Name\": \"HBO\",\r\n      \"Amount\": 15,\r\n      \"Description\": \"\",\r\n      \"Id\": 2013\r\n    },\r\n    {\r\n      \"ExpenseTypeId\": 8,\r\n      \"ExpenseType\": {\r\n        \"ExpenseType\": \"Personal\",\r\n        \"Id\": 8\r\n      },\r\n      \"Name\": \"Gym Membership\",\r\n      \"Amount\": 49.99,\r\n      \"Description\": \"\",\r\n      \"Id\": 2014\r\n    }\r\n  ];\r\n\r\nexport const MonthlyIncomes_Seed = [\r\n    {\r\n      \"IncomeTypeId\": 2,\r\n      \"IncomeType\": {\r\n        \"IncomeType\": \"Salary\",\r\n        \"Id\": 2\r\n      },\r\n      \"Name\": \"Monthly Salary\",\r\n      \"Amount\": 2100,\r\n      \"Description\": \"\",\r\n      \"Id\": 3002\r\n    },\r\n    {\r\n      \"IncomeTypeId\": 2,\r\n      \"IncomeType\": {\r\n        \"IncomeType\": \"Salary\",\r\n        \"Id\": 2\r\n      },\r\n      \"Name\": \"Fixed Account Interest\",\r\n      \"Amount\": 200,\r\n      \"Description\": \"\",\r\n      \"Id\": 3003\r\n    },\r\n    {\r\n      \"IncomeTypeId\": 2,\r\n      \"IncomeType\": {\r\n        \"IncomeType\": \"Salary\",\r\n        \"Id\": 2\r\n      },\r\n      \"Name\": \"Transport Allowance\",\r\n      \"Amount\": 50,\r\n      \"Description\": \"\",\r\n      \"Id\": 3004\r\n    },\r\n    {\r\n      \"IncomeTypeId\": 2,\r\n      \"IncomeType\": {\r\n        \"IncomeType\": \"Salary\",\r\n        \"Id\": 2\r\n      },\r\n      \"Name\": \"Sub-Leasing Profits\",\r\n      \"Amount\": 3500,\r\n      \"Description\": \"\",\r\n      \"Id\": 3005\r\n    }\r\n  ];","import Api from '../../../Lib/ApiCalls';\r\nimport Constants from '../../../Constants';\r\nimport { IncomeTypes_Seed, MonthlyIncomes_Seed } from '../../../Seed_Data';\r\n\r\nconst apiEndpoint = `${Constants.apiDomain}/MonthlyIncomes`;\r\n\r\nconst income = {\r\n    state: {\r\n        incomeTypes: IncomeTypes_Seed,\r\n        monthlyIncomeList: MonthlyIncomes_Seed\r\n        // incomeTypes: [],\r\n        // monthlyIncomeList: []\r\n    },\r\n    reducers: {\r\n        populateIncomeList(state, incomes) {\r\n            return {\r\n                ...state,\r\n                monthlyIncomeList: incomes || []\r\n            };\r\n        },\r\n        populateIncomeTypes(state, incomeTypes) {\r\n            return {\r\n                ...state,\r\n                incomeTypes\r\n            };\r\n        },\r\n        addIncome(state, income) {\r\n            return {\r\n                ...state,\r\n                monthlyIncomeList: [...state.monthlyIncomeList, income]\r\n            }\r\n        },\r\n        updateIncome(state, income) {\r\n            return {\r\n                ...state,\r\n                monthlyIncomeList: state.monthlyIncomeList.map(\r\n                    item => item.Id === income.Id ? { ...item, ...income } : item\r\n                )\r\n            }\r\n        },\r\n        deleteIncome(state, id) {\r\n            return {\r\n                ...state, \r\n                monthlyIncomeList: state.monthlyIncomeList.filter(x => x.Id !== id)\r\n            }\r\n        }\r\n    },\r\n    effects: (dispatch) => ({\r\n        async fetchMonthlyIncomes(payload, state) {\r\n            try {\r\n                // this.populateIncomeList(\r\n                //     await Api.Get({ url: `${apiEndpoint}` })\r\n                // );\r\n            }\r\n            catch (error) {\r\n                dispatch.notification.addErrorNotification('Unable to fetch monthly income.');\r\n            }\r\n        },\r\n        async fetchIncomeTypes(payload, state) {\r\n            try {\r\n                // this.populateIncomeTypes(\r\n                //     await Api.Get({ url: `${Constants.apiDomain}/IncomeTypes` })\r\n                // );\r\n            }\r\n            catch (error) {\r\n                dispatch.notification.addErrorNotification('Unable to fetch income types.');\r\n            }\r\n        },\r\n        async createIncomeEntry(payload, state) {\r\n            try {\r\n                let income = {\r\n                    IncomeTypeId: payload.IncomeTypeId,\r\n                    IncomeType: state.income.incomeTypes.find(x => x.Id === payload.IncomeTypeId),\r\n                    Name: payload.Name,\r\n                    Amount: payload.Amount,\r\n                    Description: payload.Description || \"\",\r\n                    Id: (state.income.monthlyIncomeList.reduce((prev, curr) => (prev.Id > curr.Id ? prev.Id : curr.Id), 0)) + 1              \r\n                };\r\n                this.addIncome(income)\r\n                // await Api.Post({ url: `${apiEndpoint}`, body: payload })\r\n                // this.fetchMonthlyIncomes();\r\n                dispatch.notification.addSuccessNotification('Income entry has been created.');\r\n            }\r\n            catch (error) {\r\n                dispatch.notification.addErrorNotification('Unable to created income entry.');\r\n            }\r\n        },\r\n        async updateIncomeEntry(payload, state) {\r\n            try {\r\n                let income = {\r\n                    ...payload,\r\n                    \"IncomeType\": state.income.incomeTypes.find(x => x.Id === payload.IncomeTypeId),\r\n                };\r\n                this.updateIncome(income);\r\n\r\n                // await Api.Put({ url: `${apiEndpoint}/${payload.Id}`, body: payload })\r\n                // this.fetchMonthlyIncomes();\r\n                dispatch.notification.addSuccessNotification('Income entry has been updated.');\r\n            }\r\n            catch (error) {\r\n                dispatch.notification.addErrorNotification('Unable to update income entry.');\r\n            }\r\n        },\r\n        async deleteIncomeEntry(payload, state) {\r\n            try {\r\n                this.deleteIncome(payload);\r\n                // await Api.Delete({ url: `${apiEndpoint}/${payload}` })\r\n                // this.fetchMonthlyIncomes();\r\n                dispatch.notification.addSuccessNotification('Income entry has been deleted.');\r\n            }\r\n            catch (error) {\r\n                dispatch.notification.addErrorNotification('Unable to delete income entry.');\r\n            }\r\n        }\r\n    })\r\n};\r\n\r\nexport default income;\r\n","import Api from '../../../Lib/ApiCalls';\r\nimport Constants from '../../../Constants';\r\nimport { ExpenseTypes_Seed, MonthlyExpenses_Seed } from '../../../Seed_Data';\r\n\r\nconst apiEndpoint = `${Constants.apiDomain}/MonthlyExpenses`;\r\n\r\nconst expense = {\r\n    state: {\r\n        expenseTypes: ExpenseTypes_Seed,\r\n        monthlyExpenseList: MonthlyExpenses_Seed\r\n        // expenseTypes: [],\r\n        // monthlyExpenseList: []\r\n    },\r\n    reducers: {\r\n        populateExpenseList(state, expenses) {\r\n            return {\r\n                ...state,\r\n                monthlyExpenseList: expenses || []\r\n            };\r\n        },\r\n        populateExpenseTypes(state, expenseTypes) {\r\n            return {\r\n                ...state,\r\n                expenseTypes\r\n            };\r\n        },\r\n        addExpense(state, expense) {\r\n            return {\r\n                ...state,\r\n                monthlyExpenseList: [...state.monthlyExpenseList, expense]\r\n            }\r\n        },\r\n        updateExpense(state, expense) {\r\n            return {\r\n                ...state,\r\n                monthlyExpenseList: state.monthlyExpenseList.map(\r\n                    item => item.Id === expense.Id ? { ...item, ...expense } : item\r\n                )\r\n            }\r\n        },\r\n        deleteExpense(state, id) {\r\n            return {\r\n                ...state, \r\n                monthlyExpenseList: state.monthlyExpenseList.filter(x => x.Id !== id)\r\n            }\r\n        }\r\n    },\r\n    effects: (dispatch) => ({\r\n        async fetchMonthlyExpenses(payload, state) {\r\n            try {\r\n                // this.populateExpenseList(\r\n                //     await Api.Get({ url: `${apiEndpoint}` })\r\n                // );\r\n            } catch (error) {\r\n                dispatch.notification.addErrorNotification('Unable to fetch monthly expenses.');\r\n            }\r\n        },\r\n        async fetchExpenseTypes(payload, state) {\r\n            try {\r\n                // this.populateExpenseTypes(\r\n                //     await Api.Get({ url: `${Constants.apiDomain}/ExpenseTypes` })\r\n                // );\r\n            }\r\n            catch (error) {\r\n                dispatch.notification.addErrorNotification('Unable to fetch expense types.');\r\n            }\r\n        },\r\n        async createExpenseEntry(payload, state) {\r\n            try {\r\n                let expense = {\r\n                    ExpenseTypeId: payload.ExpenseTypeId,\r\n                    ExpenseType: state.expense.expenseTypes.find(x => x.Id === payload.ExpenseTypeId),\r\n                    Name: payload.Name,\r\n                    Amount: payload.Amount,\r\n                    Description: payload.Description || \"\",\r\n                    Id: (state.expense.monthlyExpenseList.reduce((prev, curr) => (prev.Id > curr.Id ? prev.Id : curr.Id), 0)) + 1              \r\n                };\r\n                this.addExpense(expense)\r\n                // await Api.Post({ url: `${apiEndpoint}`, body: payload })\r\n                // this.fetchMonthlyExpenses();\r\n                dispatch.notification.addSuccessNotification('Expense entry has been created.');\r\n            }\r\n            catch (error) {\r\n                dispatch.notification.addErrorNotification('Unable to created expense entry.');\r\n            }\r\n        },\r\n        async updateExpenseEntry(payload, state) {\r\n            try {\r\n                let expense = {\r\n                    ...payload,\r\n                    \"ExpenseType\": state.expense.expenseTypes.find(x => x.Id === payload.ExpenseTypeId),\r\n                };\r\n                this.updateExpense(expense);\r\n                // await Api.Put({ url: `${apiEndpoint}/${payload.Id}`, body: payload })\r\n                // this.fetchMonthlyExpenses();\r\n                dispatch.notification.addSuccessNotification('Expense entry has been updated.');\r\n            }\r\n            catch (error) {\r\n                dispatch.notification.addErrorNotification('Unable to update income entry.');\r\n            }\r\n        },\r\n        async deleteExpenseEntry(payload, state) {\r\n            try {\r\n                this.deleteExpense(payload);\r\n                // await Api.Delete({ url: `${apiEndpoint}/${payload}` })\r\n                // this.fetchMonthlyExpenses();\r\n                dispatch.notification.addSuccessNotification('Expense entry has been deleted.');\r\n            }\r\n            catch (error) {\r\n                dispatch.notification.addErrorNotification('Unable to delete income entry.');\r\n            }\r\n        }\r\n    })\r\n};\r\n\r\nexport default expense;","import { init } from '@rematch/core';\r\nimport createLoadingPlugin from '@rematch/loading'\r\n\r\nimport notification from './Modules/AppContainer/services/NotificationModel';\r\nimport user from './Modules/AppContainer/services/UserModel';\r\nimport income from './Modules/Income/services/IncomeModel';\r\nimport expense from './Modules/Expense/services/ExpensesModel';\r\n\r\nconst loadingPlugin = createLoadingPlugin()\r\n\r\nconst store = init({\r\n    plugins: [loadingPlugin],\r\n    models: {\r\n        notification,\r\n        user,\r\n        income,\r\n        expense\r\n    },\r\n    redux: {\r\n        devtoolOptions: {\r\n            disabled: process.env.NODE_ENV === 'development' ? false : true\r\n        },\r\n        reducers: {\r\n            // notification\r\n            // form: formReducer\r\n        },\r\n        middlewares: []\r\n    }\r\n});\r\n\r\nexport default store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport App from './Modules/AppContainer/components/App';\r\n\r\nimport store from './store';\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}